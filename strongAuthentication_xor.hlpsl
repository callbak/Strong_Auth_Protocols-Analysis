%%%% B -> A: B,s

role role_A(A:agent,B:agent,SND,RCV:channel(dy))
played_by A
def=
	local
		State:nat,S:text,Na:text
	init
		State := 0
	transition
                                1. State=0 /\ RCV(start)  =|> State':=1 /\ Na':=new() /\ SND(Na')
		2. State=1 /\ RCV(xor(Na,S')) =|> State':=2

               %% A checks that B is the emmiter of nonce
                /\ request(A,B,auth_1,Na) 
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role role_B(B:agent,A:agent,S:text,SND,RCV:channel(dy))
played_by B
def=
	local
		State:nat,Na:text
	init
		State := 0
	transition
                                1. State=0 /\ RCV(Na')  =|> State':=1 /\ SND(xor(Na',S))
                
                /\ secret(S,sec_1,{A,B}) 
                %% B Check the athentication of nonce
                /\ witness(B,A,auth_1,Na') 
end role

role session(A:agent,B:agent,S:text)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_B(B,A,S,SND2,RCV2) /\ role_A(A,B,SND1,RCV1)
end role

role environment()
def=
	const
	               alice,bob:agent,
                               s1:text,
                               sec_1,sec_2,auth_1:protocol_id

	intruder_knowledge = {alice,bob}

	composition
                               %% add another session for replay attack
		session(alice,bob,s1) /\ session(alice,bob,s1)
end role

goal 
                secrecy_of sec_1   
                secrecy_of sec_2
                %%  weak_authentication_on auth_1 , wrequest
                authentication_on auth_1
end goal

environment()
